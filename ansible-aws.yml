---
- name: Provision AWS EC2 Instances
  hosts: localhost
  vars_files:
    - aws_credentials.yml
  vars:
    - instance_type: 't2.micro'
    - instance_image: 'ami-052efd3df9dad4825'
    - region: 'us-east-1'

  tasks:
    
    - name: Create a new ec2 key
      ec2_key:
        name: 'aws_test_key'
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        region: '{{ region }}'
      register: key_info

    - name: Save private key
      copy: 
        content: '{{ key_info.key.private_key }}' 
        dest: '{{ ansible_user_dir }}/.ssh/aws_test_key'
        mode: 0600
      when: key_info.changed

    - name: Show key_info
      ansible.builtin.debug:
        var: key_info

    - name: Provision security group
      ec2_group:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        name: 'aws-test-group'
        region: '{{ region }}'
        description: 'aws-test-group allow all on port 22 8080'
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22 80 8080

    - name: Create ec2 Instances
      ec2:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        instance_type: '{{ instance_type }}'
        image: '{{ instance_image }}'
        key_name: 'aws_test_key'
        region: '{{ region }}'
        count: 2
        wait: true
        group: 'aws-test-group'
      register: ec2_info

#    - name: Info instance
#      ec2_instance_info:
#        aws_access_key: '{{ aws_access_key }}'
#        aws_secret_key: '{{ aws_secret_key }}'
#        region: '{{ region }}'
#      register: ec2_info

    - name: show Info
      ansible.builtin.debug:
        var: ec2_info

    - name: Create memory inventory to build instance
      add_host:
        hostname: '{{ ec2_info.instances[0].public_ip }}'
        groupname: build

    - name: create ssh group for connect to build instance
      add_host:
        hostname: '{{ ec2_info.instances[1].public_ip }}'
        groupname: prod

    - name: wait ssh
      wait_for:
        host: '{{ item }}'
        port: 22
        state: started
      with_items:
        - 'build'
        - 'prod'

- name: Preparing the build-node
  hosts: '{{ instanse }}'
  remote_user: ubuntu
  become: true
  vars:
    : build
    repository: 'https://github.com/boxfuse/boxfuse-sample-java-war-hello.git'
    package:
      - 'default-jdk'
      - 'maven'
      - 'git'
    workdir: '/opt/app'

  tasks:
  - name: Make sure the packages are present
    apt:
      name: '{{ package }}'
      state: present
      cache_valid_time: 10000

  - name: Fetch application on git
    git:
      repo: '{{ repository }}'
      dest: '{{ workdir }}'

  - name: build webapp
    shell: mvn clean package
    args:
      chdir: '{{ workdir }}'

  - name: Fetch webapp-file
    fetch:
      src: '{{ workdir }}/target/hello-1.0.war'
      dest: '{{ workdir }}/hello-1.0.war'
      flat: yes


- name: Preparing the prod-node
  hosts: '{{ instanse }}'
  become: true
  vars:
    instanse: prod
    package: 'tomcat9'
    app_path: '/opt/app/hello-1.0.war'
    web_path: '/var/lib/tomcat9/webapps/hello-1.0.war'
  tasks:

    - name: Ensure the package is present
      apt:
        name: '{{ package }}'
        state: present
        cache_valid_time: 10000

    - name: Copy webapp-file
      copy:
        src: '{{ app_path }}'
        dest: '{{ web_path }}'

    - name: Ensure tomcat is started
      service:
        name: '{{ package }}'
        state: started

    - name: Clear source
      file:
        state: absent
        path: '{{ app_path }}'
      delegate_to: localhost
